// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  fullName  String   @map("full_name")
  nidHash   String   @map("nid_hash")
  phone     String
  email     String?
  verified  Boolean  @default(false)
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  wallet             Wallet?
  verifications      Verification[]
  tickets            Ticket[]
  emailVerifications EmailVerification[]

  @@map("users")
}

model Verification {
  id             Int      @id @default(autoincrement())
  userId         Int      @map("user_id")
  nidNumber      String   @map("nid_number")
  passportNumber String?  @map("passport_number")
  dateOfBirth    String   @map("date_of_birth")
  address        String
  status         String   @default("pending")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("verifications")
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  balance   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("wallets")
}

model Transaction {
  id            Int      @id @default(autoincrement())
  walletId      Int      @map("wallet_id")
  amount        Int
  type          String
  description   String
  paymentId     String?  @map("payment_id")
  paymentMethod String?  @map("payment_method")
  status        String   @default("pending")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  wallet Wallet @relation(fields: [walletId], references: [id])

  @@map("transactions")
}

model Train {
  id          Int      @id @default(autoincrement())
  name        String
  trainNumber String   @unique @map("train_number")
  type        String
  status      String   @default("active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  schedules Schedule[]
  seats     Seat[]

  @@map("trains")
}

model Station {
  id            Int      @id @default(autoincrement())
  name          String
  city          String
  status        String   @default("operational")
  platforms     Int      @default(1)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  departureSchedules Schedule[] @relation("departureStation")
  arrivalSchedules   Schedule[] @relation("arrivalStation")

  @@map("stations")
}

model Schedule {
  id             Int      @id @default(autoincrement())
  trainId        Int      @map("train_id")
  fromStationId  Int      @map("from_station_id")
  toStationId    Int      @map("to_station_id")
  departureTime  DateTime @map("departure_time")
  arrivalTime    DateTime @map("arrival_time")
  journeyDate    String   @map("journey_date")
  availableSeats Int      @map("available_seats")
  status         String   @default("scheduled")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  train         Train          @relation(fields: [trainId], references: [id])
  fromStation   Station        @relation("departureStation", fields: [fromStationId], references: [id])
  toStation     Station        @relation("arrivalStation", fields: [toStationId], references: [id])
  tickets       Ticket[]
  seatSchedules SeatSchedule[]

  @@map("schedules")
}

model Seat {
  id          Int      @id @default(autoincrement())
  trainId     Int      @map("train_id")
  seatNumber  String   @map("seat_number")
  seatClass   String   @map("seat_class") // economy, business, first-class, etc.
  carNumber   Int      @map("car_number")
  position    String   // window, aisle, middle
  features    Json?    // air conditioning, power outlet, etc.
  status      String   @default("active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  train         Train           @relation(fields: [trainId], references: [id])
  seatSchedules SeatSchedule[]

  @@unique([trainId, seatNumber, carNumber])
  @@map("seats")
}

model SeatSchedule {
  id         Int      @id @default(autoincrement())
  scheduleId Int      @map("schedule_id")
  seatId     Int      @map("seat_id")
  price      Float    @default(0.0)
  isBooked   Boolean  @default(false) @map("is_booked")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  schedule Schedule @relation(fields: [scheduleId], references: [id])
  seat     Seat     @relation(fields: [seatId], references: [id])
  ticket   Ticket?

  @@unique([scheduleId, seatId])
  @@map("seat_schedules")
}

model Ticket {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  scheduleId    Int      @map("schedule_id")
  seatNumber    String   @map("seat_number")
  paymentId     String?  @map("payment_id")
  paymentStatus String   @default("pending") @map("payment_status")
  ticketHash    String   @map("ticket_hash")
  qrCode        String   @map("qr_code")
  price         Int      @default(150)
  issuedAt      DateTime @default(now()) @map("issued_at")
  status        String   @default("booked")
  metadata      Json?
  seatScheduleId Int?   @unique @map("seat_schedule_id")

  // Relations
  user          User                 @relation(fields: [userId], references: [id])
  schedule      Schedule             @relation(fields: [scheduleId], references: [id])
  verifications TicketVerification[]
  seatSchedule  SeatSchedule?        @relation(fields: [seatScheduleId], references: [id])

  @@map("tickets")
}

model TicketVerification {
  id         Int      @id @default(autoincrement())
  ticketId   Int      @map("ticket_id")
  verifiedBy Int      @map("verified_by")
  verifiedAt DateTime @default(now()) @map("verified_at")
  location   String?
  status     String

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id])

  @@map("ticket_verifications")
}

model EmailVerification {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("user_id")
  email            String
  verificationCode String   @map("verification_code")
  expiresAt        DateTime @map("expires_at")
  verified         Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("email_verifications")
}

model Session {
  sid    String   @id
  sess   Json
  expire DateTime

  @@map("session")
}
