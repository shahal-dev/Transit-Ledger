/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Schedule {
  export type ScheduleDataStruct = {
    id: BigNumberish;
    trainId: BigNumberish;
    fromStationId: BigNumberish;
    toStationId: BigNumberish;
    platformNumber: BigNumberish;
    departureTime: BigNumberish;
    arrivalTime: BigNumberish;
    journeyDate: string;
    availableSeats: BigNumberish;
    status: string;
  };

  export type ScheduleDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    id: BigNumber;
    trainId: BigNumber;
    fromStationId: BigNumber;
    toStationId: BigNumber;
    platformNumber: number;
    departureTime: BigNumber;
    arrivalTime: BigNumber;
    journeyDate: string;
    availableSeats: BigNumber;
    status: string;
  };
}

export interface ScheduleInterface extends utils.Interface {
  functions: {
    "createSchedule(uint256,uint256,uint256,uint8,uint256,uint256,string,uint256)": FunctionFragment;
    "getAllSchedules()": FunctionFragment;
    "getSchedule(uint256)": FunctionFragment;
    "getSchedulesByDate(string)": FunctionFragment;
    "getSchedulesByTrain(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "scheduleCount()": FunctionFragment;
    "schedules(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAvailableSeats(uint256,uint256)": FunctionFragment;
    "updateScheduleStatus(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createSchedule"
      | "getAllSchedules"
      | "getSchedule"
      | "getSchedulesByDate"
      | "getSchedulesByTrain"
      | "owner"
      | "renounceOwnership"
      | "scheduleCount"
      | "schedules"
      | "transferOwnership"
      | "updateAvailableSeats"
      | "updateScheduleStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSchedule",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSchedules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedulesByDate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchedulesByTrain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "schedules",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAvailableSeats",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateScheduleStatus",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedulesByDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchedulesByTrain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schedules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAvailableSeats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateScheduleStatus",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ScheduleCreated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ScheduleUpdated(uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleUpdated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ScheduleCreatedEventObject {
  scheduleId: BigNumber;
  trainId: BigNumber;
  fromStationId: BigNumber;
  toStationId: BigNumber;
  departureTime: BigNumber;
}
export type ScheduleCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ScheduleCreatedEventObject
>;

export type ScheduleCreatedEventFilter = TypedEventFilter<ScheduleCreatedEvent>;

export interface ScheduleUpdatedEventObject {
  scheduleId: BigNumber;
  status: string;
  availableSeats: BigNumber;
}
export type ScheduleUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ScheduleUpdatedEventObject
>;

export type ScheduleUpdatedEventFilter = TypedEventFilter<ScheduleUpdatedEvent>;

export interface Schedule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ScheduleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSchedule(
      trainId: BigNumberish,
      fromStationId: BigNumberish,
      toStationId: BigNumberish,
      platformNumber: BigNumberish,
      departureTime: BigNumberish,
      arrivalTime: BigNumberish,
      journeyDate: string,
      availableSeats: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllSchedules(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getSchedule(
      scheduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Schedule.ScheduleDataStructOutput]>;

    getSchedulesByDate(
      journeyDate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSchedulesByTrain(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    scheduleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    schedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        trainId: BigNumber;
        fromStationId: BigNumber;
        toStationId: BigNumber;
        platformNumber: number;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        journeyDate: string;
        availableSeats: BigNumber;
        status: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAvailableSeats(
      scheduleId: BigNumberish,
      seats: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateScheduleStatus(
      scheduleId: BigNumberish,
      status: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  createSchedule(
    trainId: BigNumberish,
    fromStationId: BigNumberish,
    toStationId: BigNumberish,
    platformNumber: BigNumberish,
    departureTime: BigNumberish,
    arrivalTime: BigNumberish,
    journeyDate: string,
    availableSeats: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllSchedules(overrides?: CallOverrides): Promise<BigNumber[]>;

  getSchedule(
    scheduleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Schedule.ScheduleDataStructOutput>;

  getSchedulesByDate(
    journeyDate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSchedulesByTrain(
    trainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  scheduleCount(overrides?: CallOverrides): Promise<BigNumber>;

  schedules(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      trainId: BigNumber;
      fromStationId: BigNumber;
      toStationId: BigNumber;
      platformNumber: number;
      departureTime: BigNumber;
      arrivalTime: BigNumber;
      journeyDate: string;
      availableSeats: BigNumber;
      status: string;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAvailableSeats(
    scheduleId: BigNumberish,
    seats: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateScheduleStatus(
    scheduleId: BigNumberish,
    status: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    createSchedule(
      trainId: BigNumberish,
      fromStationId: BigNumberish,
      toStationId: BigNumberish,
      platformNumber: BigNumberish,
      departureTime: BigNumberish,
      arrivalTime: BigNumberish,
      journeyDate: string,
      availableSeats: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllSchedules(overrides?: CallOverrides): Promise<BigNumber[]>;

    getSchedule(
      scheduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Schedule.ScheduleDataStructOutput>;

    getSchedulesByDate(
      journeyDate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSchedulesByTrain(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    scheduleCount(overrides?: CallOverrides): Promise<BigNumber>;

    schedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        trainId: BigNumber;
        fromStationId: BigNumber;
        toStationId: BigNumber;
        platformNumber: number;
        departureTime: BigNumber;
        arrivalTime: BigNumber;
        journeyDate: string;
        availableSeats: BigNumber;
        status: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAvailableSeats(
      scheduleId: BigNumberish,
      seats: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateScheduleStatus(
      scheduleId: BigNumberish,
      status: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ScheduleCreated(uint256,uint256,uint256,uint256,uint256)"(
      scheduleId?: BigNumberish | null,
      trainId?: BigNumberish | null,
      fromStationId?: null,
      toStationId?: null,
      departureTime?: null
    ): ScheduleCreatedEventFilter;
    ScheduleCreated(
      scheduleId?: BigNumberish | null,
      trainId?: BigNumberish | null,
      fromStationId?: null,
      toStationId?: null,
      departureTime?: null
    ): ScheduleCreatedEventFilter;

    "ScheduleUpdated(uint256,string,uint256)"(
      scheduleId?: BigNumberish | null,
      status?: null,
      availableSeats?: null
    ): ScheduleUpdatedEventFilter;
    ScheduleUpdated(
      scheduleId?: BigNumberish | null,
      status?: null,
      availableSeats?: null
    ): ScheduleUpdatedEventFilter;
  };

  estimateGas: {
    createSchedule(
      trainId: BigNumberish,
      fromStationId: BigNumberish,
      toStationId: BigNumberish,
      platformNumber: BigNumberish,
      departureTime: BigNumberish,
      arrivalTime: BigNumberish,
      journeyDate: string,
      availableSeats: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllSchedules(overrides?: CallOverrides): Promise<BigNumber>;

    getSchedule(
      scheduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedulesByDate(
      journeyDate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchedulesByTrain(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    scheduleCount(overrides?: CallOverrides): Promise<BigNumber>;

    schedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAvailableSeats(
      scheduleId: BigNumberish,
      seats: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateScheduleStatus(
      scheduleId: BigNumberish,
      status: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSchedule(
      trainId: BigNumberish,
      fromStationId: BigNumberish,
      toStationId: BigNumberish,
      platformNumber: BigNumberish,
      departureTime: BigNumberish,
      arrivalTime: BigNumberish,
      journeyDate: string,
      availableSeats: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllSchedules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSchedule(
      scheduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedulesByDate(
      journeyDate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchedulesByTrain(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    scheduleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    schedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAvailableSeats(
      scheduleId: BigNumberish,
      seats: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateScheduleStatus(
      scheduleId: BigNumberish,
      status: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
