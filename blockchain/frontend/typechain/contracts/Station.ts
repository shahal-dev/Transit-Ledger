/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Station {
  export type StationDataStruct = {
    id: BigNumberish;
    name: string;
    city: string;
    stationCode: string;
    latitude: BigNumberish;
    longitude: BigNumberish;
    platformCount: BigNumberish;
    operational: boolean;
  };

  export type StationDataStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    boolean
  ] & {
    id: BigNumber;
    name: string;
    city: string;
    stationCode: string;
    latitude: BigNumber;
    longitude: BigNumber;
    platformCount: number;
    operational: boolean;
  };
}

export interface StationInterface extends utils.Interface {
  functions: {
    "addStation(string,string,string,int256,int256,uint8)": FunctionFragment;
    "getAllStations()": FunctionFragment;
    "getStation(uint256)": FunctionFragment;
    "getStationByCode(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stationCount()": FunctionFragment;
    "stationExists(uint256)": FunctionFragment;
    "stations(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateStation(uint256,string,uint8,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addStation"
      | "getAllStations"
      | "getStation"
      | "getStationByCode"
      | "owner"
      | "renounceOwnership"
      | "stationCount"
      | "stationExists"
      | "stations"
      | "transferOwnership"
      | "updateStation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStation",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStationByCode",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stationExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStation",
    values: [BigNumberish, string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addStation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllStations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStationByCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stationExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStation",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "StationCreated(uint256,string,string)": EventFragment;
    "StationUpdated(uint256,string,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StationUpdated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StationCreatedEventObject {
  stationId: BigNumber;
  name: string;
  stationCode: string;
}
export type StationCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  StationCreatedEventObject
>;

export type StationCreatedEventFilter = TypedEventFilter<StationCreatedEvent>;

export interface StationUpdatedEventObject {
  stationId: BigNumber;
  name: string;
  operational: boolean;
}
export type StationUpdatedEvent = TypedEvent<
  [BigNumber, string, boolean],
  StationUpdatedEventObject
>;

export type StationUpdatedEventFilter = TypedEventFilter<StationUpdatedEvent>;

export interface Station extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addStation(
      name: string,
      city: string,
      stationCode: string,
      latitude: BigNumberish,
      longitude: BigNumberish,
      platformCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllStations(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getStation(
      stationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Station.StationDataStructOutput]>;

    getStationByCode(
      stationCode: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stationCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    stationExists(
      stationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        id: BigNumber;
        name: string;
        city: string;
        stationCode: string;
        latitude: BigNumber;
        longitude: BigNumber;
        platformCount: number;
        operational: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStation(
      stationId: BigNumberish,
      name: string,
      platformCount: BigNumberish,
      operational: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addStation(
    name: string,
    city: string,
    stationCode: string,
    latitude: BigNumberish,
    longitude: BigNumberish,
    platformCount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllStations(overrides?: CallOverrides): Promise<BigNumber[]>;

  getStation(
    stationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Station.StationDataStructOutput>;

  getStationByCode(
    stationCode: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stationCount(overrides?: CallOverrides): Promise<BigNumber>;

  stationExists(
    stationId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      id: BigNumber;
      name: string;
      city: string;
      stationCode: string;
      latitude: BigNumber;
      longitude: BigNumber;
      platformCount: number;
      operational: boolean;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStation(
    stationId: BigNumberish,
    name: string,
    platformCount: BigNumberish,
    operational: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStation(
      name: string,
      city: string,
      stationCode: string,
      latitude: BigNumberish,
      longitude: BigNumberish,
      platformCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllStations(overrides?: CallOverrides): Promise<BigNumber[]>;

    getStation(
      stationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Station.StationDataStructOutput>;

    getStationByCode(
      stationCode: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stationCount(overrides?: CallOverrides): Promise<BigNumber>;

    stationExists(
      stationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        id: BigNumber;
        name: string;
        city: string;
        stationCode: string;
        latitude: BigNumber;
        longitude: BigNumber;
        platformCount: number;
        operational: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStation(
      stationId: BigNumberish,
      name: string,
      platformCount: BigNumberish,
      operational: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StationCreated(uint256,string,string)"(
      stationId?: BigNumberish | null,
      name?: null,
      stationCode?: null
    ): StationCreatedEventFilter;
    StationCreated(
      stationId?: BigNumberish | null,
      name?: null,
      stationCode?: null
    ): StationCreatedEventFilter;

    "StationUpdated(uint256,string,bool)"(
      stationId?: BigNumberish | null,
      name?: null,
      operational?: null
    ): StationUpdatedEventFilter;
    StationUpdated(
      stationId?: BigNumberish | null,
      name?: null,
      operational?: null
    ): StationUpdatedEventFilter;
  };

  estimateGas: {
    addStation(
      name: string,
      city: string,
      stationCode: string,
      latitude: BigNumberish,
      longitude: BigNumberish,
      platformCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllStations(overrides?: CallOverrides): Promise<BigNumber>;

    getStation(
      stationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStationByCode(
      stationCode: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stationCount(overrides?: CallOverrides): Promise<BigNumber>;

    stationExists(
      stationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stations(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateStation(
      stationId: BigNumberish,
      name: string,
      platformCount: BigNumberish,
      operational: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStation(
      name: string,
      city: string,
      stationCode: string,
      latitude: BigNumberish,
      longitude: BigNumberish,
      platformCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllStations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStation(
      stationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStationByCode(
      stationCode: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stationCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stationExists(
      stationId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStation(
      stationId: BigNumberish,
      name: string,
      platformCount: BigNumberish,
      operational: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
