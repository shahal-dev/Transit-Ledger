/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Train {
  export type TrainDataStruct = {
    id: BigNumberish;
    name: string;
    trainNumber: string;
    coachCount: BigNumberish;
    seatsPerCoach: BigNumberish;
    operational: boolean;
  };

  export type TrainDataStructOutput = [
    BigNumber,
    string,
    string,
    number,
    number,
    boolean
  ] & {
    id: BigNumber;
    name: string;
    trainNumber: string;
    coachCount: number;
    seatsPerCoach: number;
    operational: boolean;
  };
}

export interface TrainInterface extends utils.Interface {
  functions: {
    "addTrain(string,string,uint8,uint16)": FunctionFragment;
    "getAllTrains()": FunctionFragment;
    "getTrain(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "trainCount()": FunctionFragment;
    "trainExists(uint256)": FunctionFragment;
    "trains(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTrain(uint256,string,uint8,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTrain"
      | "getAllTrains"
      | "getTrain"
      | "owner"
      | "renounceOwnership"
      | "trainCount"
      | "trainExists"
      | "trains"
      | "transferOwnership"
      | "updateTrain"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTrain",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTrains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trainCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trainExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTrain",
    values: [BigNumberish, string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addTrain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllTrains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trainCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trainExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTrain",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TrainCreated(uint256,string,string)": EventFragment;
    "TrainUpdated(uint256,string,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrainCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrainUpdated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TrainCreatedEventObject {
  trainId: BigNumber;
  trainNumber: string;
  name: string;
}
export type TrainCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  TrainCreatedEventObject
>;

export type TrainCreatedEventFilter = TypedEventFilter<TrainCreatedEvent>;

export interface TrainUpdatedEventObject {
  trainId: BigNumber;
  name: string;
  operational: boolean;
}
export type TrainUpdatedEvent = TypedEvent<
  [BigNumber, string, boolean],
  TrainUpdatedEventObject
>;

export type TrainUpdatedEventFilter = TypedEventFilter<TrainUpdatedEvent>;

export interface Train extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTrain(
      name: string,
      trainNumber: string,
      coachCount: BigNumberish,
      seatsPerCoach: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllTrains(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTrain(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Train.TrainDataStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    trainCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    trainExists(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    trains(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, number, number, boolean] & {
        id: BigNumber;
        name: string;
        trainNumber: string;
        coachCount: number;
        seatsPerCoach: number;
        operational: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateTrain(
      trainId: BigNumberish,
      name: string,
      coachCount: BigNumberish,
      operational: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addTrain(
    name: string,
    trainNumber: string,
    coachCount: BigNumberish,
    seatsPerCoach: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllTrains(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTrain(
    trainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Train.TrainDataStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  trainCount(overrides?: CallOverrides): Promise<BigNumber>;

  trainExists(
    trainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  trains(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, number, number, boolean] & {
      id: BigNumber;
      name: string;
      trainNumber: string;
      coachCount: number;
      seatsPerCoach: number;
      operational: boolean;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateTrain(
    trainId: BigNumberish,
    name: string,
    coachCount: BigNumberish,
    operational: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTrain(
      name: string,
      trainNumber: string,
      coachCount: BigNumberish,
      seatsPerCoach: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllTrains(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTrain(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Train.TrainDataStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    trainCount(overrides?: CallOverrides): Promise<BigNumber>;

    trainExists(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trains(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, number, number, boolean] & {
        id: BigNumber;
        name: string;
        trainNumber: string;
        coachCount: number;
        seatsPerCoach: number;
        operational: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTrain(
      trainId: BigNumberish,
      name: string,
      coachCount: BigNumberish,
      operational: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TrainCreated(uint256,string,string)"(
      trainId?: BigNumberish | null,
      trainNumber?: null,
      name?: null
    ): TrainCreatedEventFilter;
    TrainCreated(
      trainId?: BigNumberish | null,
      trainNumber?: null,
      name?: null
    ): TrainCreatedEventFilter;

    "TrainUpdated(uint256,string,bool)"(
      trainId?: BigNumberish | null,
      name?: null,
      operational?: null
    ): TrainUpdatedEventFilter;
    TrainUpdated(
      trainId?: BigNumberish | null,
      name?: null,
      operational?: null
    ): TrainUpdatedEventFilter;
  };

  estimateGas: {
    addTrain(
      name: string,
      trainNumber: string,
      coachCount: BigNumberish,
      seatsPerCoach: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllTrains(overrides?: CallOverrides): Promise<BigNumber>;

    getTrain(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    trainCount(overrides?: CallOverrides): Promise<BigNumber>;

    trainExists(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trains(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateTrain(
      trainId: BigNumberish,
      name: string,
      coachCount: BigNumberish,
      operational: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTrain(
      name: string,
      trainNumber: string,
      coachCount: BigNumberish,
      seatsPerCoach: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllTrains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrain(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    trainCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trainExists(
      trainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trains(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateTrain(
      trainId: BigNumberish,
      name: string,
      coachCount: BigNumberish,
      operational: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
