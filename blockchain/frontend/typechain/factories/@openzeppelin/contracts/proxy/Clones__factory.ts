/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Clones,
  ClonesInterface,
} from "../../../../@openzeppelin/contracts/proxy/Clones";

const _abi = [
  {
    inputs: [],
    name: "CloneArgumentsTooLong",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212204c8ac9adb84af996396f5545e5f2ef2721b187874d9fd2be938194f654f6760464736f6c63430008140033";

type ClonesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClonesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Clones__factory extends ContractFactory {
  constructor(...args: ClonesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<Clones> {
    return super.deploy(overrides || {}) as Promise<Clones>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Clones {
    return super.attach(address) as Clones;
  }
  override connect(signer: Signer): Clones__factory {
    return super.connect(signer) as Clones__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClonesInterface {
    return new utils.Interface(_abi) as ClonesInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Clones {
    return new Contract(address, _abi, signerOrProvider) as Clones;
  }
}
